package com.jterry.scala.sfn

object SmallestFreeNumberApplication extends App {
  println("Hello World")
	
  def getMinFree (s : String, xs : Array[Integer], e : Integer) : Integer = {
    return getMinFreePrime(xs, 0, xs.length)
  }
	
  def getMinFreePrime (xs : Array[Integer], start : Integer, len : Integer) : Integer = {
    if (len == 0)
      return start
      
    var pv = computePartition(start, len)
    var parts = partitionList(xs, pv)
    var left = parts._1
    var right = parts._2
    var leftLen = left.length
    var rightLen = len - leftLen
    var rightStart = start + leftLen
    var inRight = rightStart == pv
    
    if (inRight)
      return getMinFreePrime(right, pv, rightLen)
    else
      return getMinFreePrime(left, start, leftLen)
  }
	
  def computePartition (start : Integer, len : Integer) : Integer = {
    return start + 1 + len / 2
  }
	
  def partitionList (xs : Array[Integer], pv : Integer) : (Array[Integer], Array[Integer]) = {
    return xs.partition(_ < pv);
  }
	
  def intToString (n : Integer) : String = {
    return n.toString()
  }
}